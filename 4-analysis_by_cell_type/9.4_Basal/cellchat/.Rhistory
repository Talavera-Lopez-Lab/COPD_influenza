pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
### Identify global communication patterns
selectK(cellchat, pattern = "incoming")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns,  width = 10, height = 10)
### Sankey plot
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "incoming", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "incoming")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
# Hierarchy plot
vertex.receiver = seq(1,4)
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
plotGeneExpression(cellchat, signaling = "FN1")
# Save object
saveRDS(cellchat, file = "../../../data/Basal_Healthy-IAV_anotated.rds")
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
options(stringsAsFactors = FALSE)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
### Read in data
ad <- import("anndata", convert = FALSE)
pd <- import("pandas", convert = FALSE)
ad_object <- ad$read_h5ad("../../../data/Basal_COPD-CTRL_anotated.h5ad")
### Access expression matrix
data.input <- t(py_to_r(ad_object$X))
### Add metadata
rownames(data.input) <- rownames(py_to_r(ad_object$var))
colnames(data.input) <- rownames(py_to_r(ad_object$obs))
meta.data <- py_to_r(ad_object$obs)
meta <- meta.data
### Create `cellchat` object
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "cell_states")
### Set up ligand-receptor interaction database for `cellchat`
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- CellChatDB
cellchat@DB <- CellChatDB.use
### Process expression data
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat, raw.use = TRUE)
cellchat <- filterCommunication(cellchat, min.cells = 5)
### Export results as dataframe
df.net <- subsetCommunication(cellchat)
head(df.net)
write.table(df.net, sep = ',', row.names = FALSE, 'Basal_COPD-CTRL_cellchat_net.csv')
### Infer cell-cell communication
cellchat <- computeCommunProbPathway(cellchat)
### Calculate aggregated cell-cell communication
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,3), xpd = TRUE)
options(repr.plot.width = 40, repr.plot.height = 40)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat@net$weight
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
unique(df.net$pathway_name)
options(repr.plot.width = 10, repr.plot.height = 15)
pathways.show <- c("LAMININ")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
options(repr.plot.width = 10, repr.plot.height = 10)
gg1 <- netAnalysis_signalingRole_scatter(cellchat)
gg2 <- netAnalysis_signalingRole_scatter(cellchat, signaling = c("FN1", "IL1"))
gg1 + gg2
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 17, height = 19, color.heatmap = "YlGnBu")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", width = 17, height = 19, color.heatmap = "YlGnBu")
ht1 + ht2
### Identify global communication patterns
selectK(cellchat, pattern = "outgoing")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "outgoing", k = nPatterns,  width = 10, height = 10)
### Sankey plot
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "outgoing", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "outgoing")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
### Identify global communication patterns
selectK(cellchat, pattern = "incoming")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns,  width = 10, height = 10)
### Sankey plot
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "incoming", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "incoming")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
# Hierarchy plot
vertex.receiver = seq(1,4)
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
plotGeneExpression(cellchat, signaling = "FN1")
# Save object
saveRDS(cellchat, file = "../../../data/Basal_COPD-CTRL_anotated.rds")
gc()
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
options(stringsAsFactors = FALSE)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
### Read in data
ad <- import("anndata", convert = FALSE)
pd <- import("pandas", convert = FALSE)
ad_object <- ad$read_h5ad("../../../data/Basal_COPD-IAV_anotated.h5ad")
### Access expression matrix
data.input <- t(py_to_r(ad_object$X))
### Add metadata
rownames(data.input) <- rownames(py_to_r(ad_object$var))
colnames(data.input) <- rownames(py_to_r(ad_object$obs))
meta.data <- py_to_r(ad_object$obs)
meta <- meta.data
### Create `cellchat` object
cellchat <- createCellChat(object = data.input, meta = meta, group.by = "cell_states")
### Set up ligand-receptor interaction database for `cellchat`
CellChatDB <- CellChatDB.human
showDatabaseCategory(CellChatDB)
dplyr::glimpse(CellChatDB$interaction)
CellChatDB.use <- CellChatDB
cellchat@DB <- CellChatDB.use
### Process expression data
cellchat <- subsetData(cellchat)
cellchat <- identifyOverExpressedGenes(cellchat)
cellchat <- identifyOverExpressedInteractions(cellchat)
cellchat <- projectData(cellchat, PPI.human)
cellchat <- computeCommunProb(cellchat, raw.use = TRUE)
cellchat <- filterCommunication(cellchat, min.cells = 5)
### Export results as dataframe
df.net <- subsetCommunication(cellchat)
head(df.net)
write.table(df.net, sep = ',', row.names = FALSE, 'Basal_COPD-IAV_cellchat_net.csv')
### Infer cell-cell communication
cellchat <- computeCommunProbPathway(cellchat)
### Calculate aggregated cell-cell communication
cellchat <- aggregateNet(cellchat)
groupSize <- as.numeric(table(cellchat@idents))
par(mfrow = c(1,3), xpd = TRUE)
options(repr.plot.width = 40, repr.plot.height = 40)
netVisual_circle(cellchat@net$count, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Number of interactions")
netVisual_circle(cellchat@net$weight, vertex.weight = groupSize, weight.scale = T, label.edge= F, title.name = "Interaction weights/strength")
mat <- cellchat@net$weight
par(mfrow = c(3,3), xpd=TRUE)
for (i in 1:nrow(mat)) {
mat2 <- matrix(0, nrow = nrow(mat), ncol = ncol(mat), dimnames = dimnames(mat))
mat2[i, ] <- mat[i, ]
netVisual_circle(mat2, vertex.weight = groupSize, weight.scale = T, edge.weight.max = max(mat), title.name = rownames(mat)[i])
}
unique(df.net$pathway_name)
options(repr.plot.width = 10, repr.plot.height = 15)
pathways.show <- c("LAMININ")
#pathways.show <- c("CXCL")
netAnalysis_contribution(cellchat, signaling = pathways.show)
vertex.receiver = seq(1,4) # a numeric vector.
netVisual_aggregate(cellchat, signaling = pathways.show,  vertex.receiver = vertex.receiver)
par(mfrow=c(1,1))
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "circle")
netVisual_aggregate(cellchat, signaling = pathways.show, layout = "chord")
cellchat <- netAnalysis_computeCentrality(cellchat, slot.name = "netP")
options(repr.plot.width = 10, repr.plot.height = 10)
gg1 <- netAnalysis_signalingRole_scatter(cellchat)
gg2 <- netAnalysis_signalingRole_scatter(cellchat, signaling = c("FN1", "IL1"))
gg1 + gg2
options(repr.plot.width = 5, repr.plot.height = 5)
ht1 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "outgoing", width = 17, height = 19, color.heatmap = "YlGnBu")
ht2 <- netAnalysis_signalingRole_heatmap(cellchat, pattern = "incoming", width = 17, height = 19, color.heatmap = "YlGnBu")
ht1 + ht2
### Identify global communication patterns
selectK(cellchat, pattern = "outgoing")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "outgoing", k = nPatterns,  width = 10, height = 10)
### Sankey plot
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "outgoing", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "outgoing")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
### Identify global communication patterns
selectK(cellchat, pattern = "incoming")
options(repr.plot.width = 15, repr.plot.height = 15)
nPatterns = 5
cellchat <- identifyCommunicationPatterns(cellchat, pattern = "incoming", k = nPatterns,  width = 10, height = 10)
### Sankey plot
options(repr.plot.width = 40, repr.plot.height = 22.5)
netAnalysis_river(cellchat, pattern = "incoming", font.size = 2.5, font.size.title = 20)
netAnalysis_dot(cellchat, pattern = "incoming")
pairLR.pathway <- extractEnrichedLR(cellchat, signaling = pathways.show, geneLR.return = FALSE)
LR.show <- pairLR.pathway[1,] # show one ligand-receptor pair
# Hierarchy plot
vertex.receiver = seq(1,4)
netVisual_individual(cellchat, signaling = pathways.show, pairLR.use = LR.show, layout = "chord")
plotGeneExpression(cellchat, signaling = "FN1")
# Save object
saveRDS(cellchat, file = "../../../data/Basal_COPD-IAV_anotated.rds")
gc()
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
library(wordcloud)
library(ComplexHeatmap)
options(stringsAsFactors = FALSE)
trace(netClustering, edit=TRUE)
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
library(wordcloud)
library(ComplexHeatmap)
options(stringsAsFactors = FALSE)
#trace(netClustering, edit=TRUE)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
### Read in data
cellchat.ctrl <- readRDS("../../../data/Basal_Healthy-CTRL_anotated.rds")
cellchat.ctrl <- updateCellChat(cellchat.ctrl)
cellchat.ctrl
cellchat.iav <- readRDS("../../../data/Basal_Healthy-IAV_anotated.rds")
cellchat.iav <- updateCellChat(cellchat.iav)
cellchat.iav
### Lift up objects to deal with different populations
group.new = levels(cellchat.iav@idents)
cellchat.ctrl <- liftCellChat(cellchat.ctrl, group.new)
### Merge objects
object.list <- list(CTRL = cellchat.ctrl, IAV = cellchat.iav)
cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
cellchat
df.net <- subsetCommunication(cellchat)
unique(df.net$pathway_name)
df.net <- subsetCommunication(cellchat)
df.net
unique(df.net$pathway_name)
unique(df.net$CTRL$pathway_name)
unique(df.net$IAV$pathway_name)
unique_to_ctrl <- setdiff(unique(df.net$CTRL$pathway_name), unique(df.net$IAV$pathway_name))
unique_to_iav <- setdiff(unique(df.net$IAV$pathway_name), unique(df.net$CTRL$pathway_name))
all_unique <- c(unique_to_ctrl, unique_to_iav)
all_unique
unique_to_ctrl
unique_to_iav
pathways.show <- c("CXCL", "CEACAM")
weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show)
pathways.show <- c("CXCL")
weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show)
pathways.show <- c("CXCL")
weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show)
pathways.show
object.list
cellchat
cellchat@netP
#weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show)
weight.max <- getMaxWeight(cellchat, slot.name = c("netP"), attribute = pathways.show)
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
library(wordcloud)
library(ComplexHeatmap)
options(stringsAsFactors = FALSE)
#trace(netClustering, edit=TRUE)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
### Read in data
cellchat.ctrl <- readRDS("../../../data/Basal_COPD-CTRL_anotated.rds")
cellchat.ctrl <- updateCellChat(cellchat.ctrl)
cellchat.ctrl
cellchat.iav <- readRDS("../../../data/Basal_COPD-IAV_anotated.rds")
cellchat.iav <- updateCellChat(cellchat.iav)
cellchat.iav
### Lift up objects to deal with different populations
group.new = levels(cellchat.iav@idents)
cellchat.ctrl <- liftCellChat(cellchat.ctrl, group.new)
### Merge objects
object.list <- list(CTRL = cellchat.ctrl, IAV = cellchat.iav)
cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
cellchat
df.net <- subsetCommunication(cellchat)
unique_to_ctrl <- setdiff(unique(df.net$CTRL$pathway_name), unique(df.net$IAV$pathway_name))
unique_to_iav <- setdiff(unique(df.net$IAV$pathway_name), unique(df.net$CTRL$pathway_name))
all_unique <- c(unique_to_ctrl, unique_to_iav)
all_unique
unique_to_ctrl
unique_to_iav
### Visualize the inferred signaling network using the lifted object
pathways.show <- c("NRXN")
#weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show)
weight.max <- getMaxWeight(cellchat, slot.name = c("netP"), attribute = pathways.show)
pathways.show <- c("NRXN")
weight.max <- getMaxWeight(object.list, slot.name = c("netP"), attribute = pathways.show)
gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2
gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2
par(mfrow = c(1,2), xpd=TRUE)
netVisual_diffInteraction(cellchat, weight.scale = T)
netVisual_diffInteraction(cellchat, weight.scale = T, measure = "weight")
### Load required modules
library(NMF)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
library(wordcloud)
library(ComplexHeatmap)
options(stringsAsFactors = FALSE)
#trace(netClustering, edit=TRUE)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
### Read in data
cellchat.ctrl <- readRDS("../../../data/Basal_Healthy-CTRL_anotated.rds")
cellchat.ctrl <- updateCellChat(cellchat.ctrl)
cellchat.ctrl
cellchat.iav <- readRDS("../../../data/Basal_Healthy-IAV_anotated.rds")
cellchat.iav <- updateCellChat(cellchat.iav)
cellchat.iav
### Lift up objects to deal with different populations
group.new = levels(cellchat.iav@idents)
cellchat.ctrl <- liftCellChat(cellchat.ctrl, group.new)
### Merge objects
object.list <- list(CTRL = cellchat.ctrl, IAV = cellchat.iav)
cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
cellchat
df.net <- subsetCommunication(cellchat)
unique_to_ctrl <- setdiff(unique(df.net$CTRL$pathway_name), unique(df.net$IAV$pathway_name))
unique_to_iav <- setdiff(unique(df.net$IAV$pathway_name), unique(df.net$CTRL$pathway_name))
all_unique <- c(unique_to_ctrl, unique_to_iav)
all_unique
### Visualise comparative metrics
gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2
par(mfrow = c(1,2), xpd=TRUE)
netVisual_diffInteraction(cellchat, weight.scale = T)
netVisual_diffInteraction(cellchat, weight.scale = T, measure = "weight")
gg1 <- netVisual_heatmap(cellchat)
gg2 <- netVisual_heatmap(cellchat, measure = "weight")
gg1 + gg2
weight.max <- getMaxWeight(object.list, attribute = c("idents","count"))
par(mfrow = c(1,2), xpd=TRUE)
for (i in 1:length(object.list)) {
netVisual_circle(object.list[[i]]@net$count, weight.scale = T, label.edge= F, edge.weight.max = weight.max[2], edge.width.max = 12, title.name = paste0("Number of interactions - ", names(object.list)[i]))
}
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg <- list()
for (i in 1:length(object.list)) {
gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax)
}
#> Signaling role analysis on the aggregated cell-cell communication network from all signaling pathways
#> Signaling role analysis on the aggregated cell-cell communication network from all signaling pathways
patchwork::wrap_plots(plots = gg)
gg1 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "SERPINE1+Basal", signaling.exclude = "MIF")
gg2 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "SERPINE2+Basal", signaling.exclude = c("MIF"))
patchwork::wrap_plots(plots = list(gg1,gg2))
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg <- list()
for (i in 1:length(object.list)) {
gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax)
}
patchwork::wrap_plots(plots = gg)
gg1 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "SERPINE1+Basal", signaling.exclude = "MIF")
gg2 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "SERPINE2+Basal", signaling.exclude = c("MIF"))
gg3 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "TNC+Basal", signaling.exclude = c("MIF"))
gg4 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Ionocyte", signaling.exclude = c("MIF"))
patchwork::wrap_plots(plots = list(gg1,gg2,gg3,gg4))
cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional")
cellchat <- netEmbedding(cellchat, type = "functional")
reticulate::py_install(packages = 'umap-learn')
cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional")
cellchat <- netEmbedding(cellchat, type = "functional")
reticulate::use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required=T)
reticulate::py_install(packages = 'umap-learn')
install.packages("umap")
library(umap)
cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional")
cellchat <- netEmbedding(cellchat, type = "functional")
runUMAP()
gc()
library(NMF)
library(umap)
library(dplyr)
library(igraph)
library(Matrix)
library(ggplot2)
library(CellChat)
library(patchwork)
library(ggalluvial)
library(reticulate)
library(wordcloud)
library(ComplexHeatmap)
options(stringsAsFactors = FALSE)
#trace(netClustering, edit=TRUE)
use_python("/Users/cartalop/mambaforge/envs/scanpy/bin", required = TRUE)
### Read in data
cellchat.ctrl <- readRDS("../../../data/Basal_Healthy-CTRL_anotated.rds")
cellchat.ctrl <- updateCellChat(cellchat.ctrl)
cellchat.ctrl
cellchat.iav <- readRDS("../../../data/Basal_Healthy-IAV_anotated.rds")
cellchat.iav <- updateCellChat(cellchat.iav)
cellchat.iav
### Lift up objects to deal with different populations
group.new = levels(cellchat.iav@idents)
cellchat.ctrl <- liftCellChat(cellchat.ctrl, group.new)
### Merge objects
object.list <- list(CTRL = cellchat.ctrl, IAV = cellchat.iav)
cellchat <- mergeCellChat(object.list, add.names = names(object.list), cell.prefix = TRUE)
cellchat
df.net <- subsetCommunication(cellchat)
unique_to_ctrl <- setdiff(unique(df.net$CTRL$pathway_name), unique(df.net$IAV$pathway_name))
unique_to_iav <- setdiff(unique(df.net$IAV$pathway_name), unique(df.net$CTRL$pathway_name))
all_unique <- c(unique_to_ctrl, unique_to_iav)
all_unique
### Visualise comparative metrics
gg1 <- compareInteractions(cellchat, show.legend = F, group = c(1,2))
gg2 <- compareInteractions(cellchat, show.legend = F, group = c(1,2), measure = "weight")
gg1 + gg2
par(mfrow = c(1,2), xpd=TRUE)
netVisual_diffInteraction(cellchat, weight.scale = T)
netVisual_diffInteraction(cellchat, weight.scale = T, measure = "weight")
gg1 <- netVisual_heatmap(cellchat)
gg2 <- netVisual_heatmap(cellchat, measure = "weight")
gg1 + gg2
weight.max <- getMaxWeight(object.list, attribute = c("idents","count"))
par(mfrow = c(1,2), xpd=TRUE)
for (i in 1:length(object.list)) {
netVisual_circle(object.list[[i]]@net$count, weight.scale = T, label.edge= F, edge.weight.max = weight.max[2], edge.width.max = 12, title.name = paste0("Number of interactions - ", names(object.list)[i]))
}
###Differential number of interactions or interaction strength among different cell types
num.link <- sapply(object.list, function(x) {rowSums(x@net$count) + colSums(x@net$count)-diag(x@net$count)})
weight.MinMax <- c(min(num.link), max(num.link)) # control the dot size in the different datasets
gg <- list()
for (i in 1:length(object.list)) {
gg[[i]] <- netAnalysis_signalingRole_scatter(object.list[[i]], title = names(object.list)[i], weight.MinMax = weight.MinMax)
}
patchwork::wrap_plots(plots = gg)
### Fcous on SERPINE Basal cells
gg1 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "SERPINE1+Basal", signaling.exclude = "MIF")
gg2 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "SERPINE2+Basal", signaling.exclude = c("MIF"))
gg3 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "TNC+Basal", signaling.exclude = c("MIF"))
gg4 <- netAnalysis_signalingChanges_scatter(cellchat, idents.use = "Ionocyte", signaling.exclude = c("MIF"))
patchwork::wrap_plots(plots = list(gg1,gg2,gg3,gg4))
##Part II: Identify the conserved and context-specific signaling pathways
#CellChat performs joint manifold learning and classification of the inferred communication networks based on their functional and topological similarity.
#NB: Such analysis is applicable to more than two datasets.
#Functional similarity: High degree of functional similarity indicates major senders and receivers are similar, and it can be interpreted as the two
#signaling pathways or two ligand-receptor pairs exhibit similar and/or redundant roles.
#NB: Functional similarity analysis is not applicable to multiple datsets with different cell type composition.
#Structural similarity: A structural similarity was used to compare their signaling network structure, without considering the similarity of senders and receivers. NB: Structural similarity analysis is applicable to multiple datsets with the same cell type composition or the vastly different cell type composition.
#Here we can run the manifold and classification learning analysis based on the functional similarity because
#the two datasets have the the same cell type composition.
###Identify signaling groups based on their functional similarity
cellchat <- computeNetSimilarityPairwise(cellchat, type = "functional")
cellchat <- netEmbedding(cellchat, type = "functional")
umap()
